%COMMON_CODE%

HelpDoc(){
    echo "usage qctl-list [option]"
    echo
    echo "Show she list of virtual machine that is managed by qctl" 
    echo
    echo " General options:"
    echo "         --architecture      Show the architecture list"
    echo "    -d | --disk              Show the disk list"
    echo "    -f | --file              Show the config file list"
    echo "    -n | --name [Name]       Shoe the virtual machines with specific names only"
    echo "    -h | --help              This help message"
}

ShowVMList(){
    if [[ -n "${TargetName}" ]]; then
        GetVMUUIDFromName "${TargetName}"
    else
        local _File _Output
        while read -r _File;do
            _crshini_get "${_File}" "VM" "Name"
        done < <(GetVMFileList)
    fi
}

ShowVMFileList(){
    if [[ -n "${TargetName}" ]]; then
        GetVMUUIDFromName "${TargetName}" 2> /dev/null | GetVMFilePathFromStdinUUID
    else
        GetVMFileList
    fi
}

ShowArchList(){
    GetArchList
}

ShowDiskList(){
    while read -r _disk; do
        _UUID=$(GetDiskUUIDFromPath "${_disk}")
        echo "${_UUID}=${_disk}"
    done < <(GetDiskPathList)
}


Main(){
    if typeset -f "Show${ListMode}List" 1> /dev/null; then
        eval "Show${ListMode}List"
        return
    else
        MsgError "Unknown list type ($ListMode)"
        return 1
    fi
}

ListMode="VM"
TargetName=""

# Parse options
OPTS=("fhdn:") OPTL=("help" "architecture" "disk" "name:")
ParseCmdOpt SHORT="$(printf "%s" "${OPTS[@]}")" LONG="$(printf "%s," "${OPTL[@]}")" -- "${@}" || exit 1
MsgDebug "Parsed command line: ${OPTRET[*]}"
eval set -- "${OPTRET[@]}"
unset OPTRET OPTS OPTL

while true; do
    case "${1}" in
        --architecture)
            ListMode="Arch"
            shift 1
            ;;
        -d | --disk)
            ListMode="Disk"
            shift 1
            ;;
        -f | --file)
            ListMode="VMFile"
            shift 1
            ;;
        -n | --name)
            TargetName="${2}"
            shift 2
            ;;
        -h | --help)
            HelpDoc
            exit 0
            ;;
        --)
            shift 1
            break
            ;;
        *)
            MsgError "Argument exception error '${1}'"
            MsgError "Please report this error to the developer." 1
            ;;
    esac
done


Main

